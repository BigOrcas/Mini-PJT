<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation=
				"http://www.springframework.org/schema/beans 
				http://www.springframework.org/schema/beans/spring-beans.xsd
				
				http://www.springframework.org/schema/context 
				http://www.springframework.org/schema/context/spring-context.xsd
				
				http://www.springframework.org/schema/mvc
				http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    
   <!-- :: 공통적인 사항을 설정한 common-servlet.xml 사용. -->
       
    <!--  ㅇ 어노테이션 기반 :: Spring Framework 사용.
    		ㅇ @Controller annotation 선언된 Bean 만 Wiring
		   ㅇ @Service / @Repository  annotation 선언된 Bean 은 Scan 제외 
	context:component-scan란 어노테이션을 클래스와 함께 선언하게 되면 스프링이 자동으로 해당 어노테이션이 붙은 클래스들을
	스캔하여 bean으로서 생성해주것을 가능하게 해주는 설정이다
		   
	base-package는 패키지를 어디부터 스캔할지 지정해주는 부분이다. 스캔할 패키지를 여러개로 지정해줄 수도 있다.	   
	stereotype은 일반적인 패턴
	include-filter 해당되는 어노테이션을 스캔대상에 포함할수있다
	exclude-filter 을 사용해 	 Service,Repository는 스캔대상에서 제외시켰고 나머지 어노테이션은 디폴트로 스캔한다  
		   -->
	<context:component-scan base-package="com.model2.mvc.web">
		<context:include-filter 	type="annotation"		expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter 	type="annotation" 	expression="org.springframework.stereotype.Service"/>
		<context:exclude-filter 	type="annotation" 	expression="org.springframework.stereotype.Repository"/>
	</context:component-scan> 
	
	
   	<!-- ■ DefaultAnnotationHandlerMapping 설정 등 기타 Annotation 기반
   	        모든 기능을 사용 할 수 있는 아래의 설정으로 변경 -->
	<mvc:annotation-driven />
	
	
	<!-- ■ Annotation 기반의 모든 기능을 사용 할 수 있는 설정
	          <mvc:annotation-driven /> 사용으로 interceptor 를 직접
	          DefaultAnnotationHandlerMapping 에 주입 할 수 없으니 
	       	  아래의 설정방법으로 interceptor 주입
   	<mvc:interceptors>
		
   		<mvc:interceptor>
			<mvc:mapping path="/user/**"/>
			<bean class="com.model2.mvc.common.web.LogonCheckInterceptor" />
   		</mvc:interceptor>

   	</mvc:interceptors>
   	
   	:: 본실습에서는 주석처리 : 추후 PJT 시 RestFul 고려 LogonCheckInterceptor 조건 추가할것
   	-->


	<!--  :: ViewResolver 선언 -->	
   <!-- 
   
    <bean id="viewResolver"
				class="org.springframework.web.servlet.view.InternalResourceViewResolver" />-->	
				
	
	
	
	
<bean id="filterMultipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="defaultEncoding" value="utf-8"/>
<!-- 파일업로드 크기 10MB로 설정 -->
    <property name="maxUploadSize" value="104857600"/>
</bean>
		
	
	
	<!--	
		■ / 형식의 Mapping 은 모든(정적,동적 자원) 요청시 처리책임
		■ 정적자원 요청시 DispatcherServlet 에게 처리방법지정
	    ■ 정적자원요청 (아래의 URI 포함 요청)시  처리 경로 location 지정
	     	
	    실제 PJT 진행시 일반적으로 resources 폴더를 만들고 폴더내부에
	     css , image, js 등 넣어 관리하며 아래와 같이 1번의 설정으로 관리
	     <mvc:resources mapping="/resources/**" location="/resources/" />
	--> 
	<mvc:resources mapping="/css/**" location="/css/" />
   	<mvc:resources mapping="/images/**" location="/images/" />
   	<mvc:resources mapping="/javascript/**" location="/javascript/" />
   	

	<!-- 	:: exception resolver  선언 :: 서술적 / 선언적 예외처리 
			:: Servlet 에서의 선언적 예외처리를 다시 생각하며....  
			식별되지않은 사람이 model까지 오는게 말이 안됨으로 컨트롤단에서 이를 미리차단하는 역할을 한다
			
			-->
	<bean id="exceptionResolver"
				class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.NullPointerException">/common/nullError.jsp</prop>
				<prop key="java.lang.NumberFormatException">/common/numberFormatError.jsp</prop>
			</props>
		</property>
		
		<property name="defaultErrorView"	value="/common/error.jsp" />
		
	</bean>
	
</beans>